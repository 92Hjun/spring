package kr.co.jhta.controller.board;

import java.io.File;
import java.io.FileOutputStream;
import java.util.List;

import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.apache.commons.io.IOUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.Errors;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import kr.co.jhta.service.board.BoardService;
import kr.co.jhta.service.sitemap.SitemapService;
import kr.co.jhta.vo.Board;
import kr.co.jhta.vo.BoardForm;
import kr.co.jhta.vo.PageNation;
import kr.co.jhta.vo.Professor;
import kr.co.jhta.vo.SearchForm;

@Controller
public class BoardController {
	
	
	static final String DIRECTORY = "C:\\spring_project\\workspace\\spring-final\\src\\main\\webapp\\resources\\images\\board";
	
	@Autowired
	private BoardService boardService;
	
	@Autowired
	private SitemapService sitemapSerivce;
	
	
	@RequestMapping("/admin/homeboard")
	public String homeboard(){
		
		return "/board/homeboard";
	}
	
	@RequestMapping(value="/admin/boardform", method=RequestMethod.GET)
	public String boardForm(Model model){
		
		model.addAttribute("boardForm", new BoardForm());
		return "/board/boardform";
	}
	
	@RequestMapping(value="/admin/boardForm", method=RequestMethod.POST)
	public String addBoard(@Valid BoardForm boardForm, Errors errors, HttpSession session)throws Exception{
		
		if (errors.hasErrors()) {
			return "/board/boardform";
			
		}
		
		Professor professor = (Professor)session.getAttribute("LOGIN_USER");
		
		if (professor == null) {
			return "redirect:/login?err=deny";
		}
		
		System.out.println(professor.getName());
		
		if (!"관리자".equals(professor.getName())) {
			return "redirect:/login?err=deny";
		}
		
		MultipartFile upFile = boardForm.getAttachFile();
		
		Board board = new Board();
		
		BeanUtils.copyProperties(boardForm, board);
		
		
		if (!upFile.isEmpty()) {
			String filename = upFile.getOriginalFilename();
			board.setFileName(filename);
			IOUtils.copy(upFile.getInputStream(), new FileOutputStream(new File(DIRECTORY, filename)));
		}
		
		board.setWriter(professor.getName());
		board.setDepartment(professor.getDivision());
		
		boardService.addNoticeBoard(board);
		
		return "redirect:/admin/board";
		
	}
	
	@RequestMapping("/admin/boardmanagement")
	public String boardManagement(Model model){
		model.addAttribute("majorList", sitemapSerivce.getAllSitemapPreService());
		return "/board/boardmanagement";
	}
	
	@RequestMapping(value="/admin/board", method=RequestMethod.GET)
	public String board (SearchForm searchForm, Model model) {
		int rows = boardService.searchBoardCount(searchForm);
		
		PageNation pageNation = null;
		
		if (searchForm.getDisplay() != 0) {
			pageNation = new PageNation(searchForm.getDisplay(), searchForm.getPageNo(), rows);
		}else {
			pageNation = new PageNation(searchForm.getPageNo(), rows);
		}
		
		searchForm.setBeginIndex(pageNation.getBeginIndex());
		searchForm.setEndIndex(pageNation.getEndIndex());
		
		List<Board> boardList = boardService.searchBoard(searchForm);
		
		System.out.println(boardList);
		System.out.println(searchForm);
		System.out.println(pageNation);
		model.addAttribute("search", searchForm);
		model.addAttribute("pagination", pageNation);
		model.addAttribute("boardList", boardList);
		
		return "/board/board";
	}
	
	// 검색 ㄱㄱ
	@RequestMapping(value="/admin/board", method=RequestMethod.POST)
	public String search(SearchForm searchForm, Model model){
		
		int rows = boardService.searchBoardCount(searchForm);
		
		PageNation pageNation = null;
		
		if (searchForm.getDisplay() != 0) {
			pageNation = new PageNation(searchForm.getDisplay(), searchForm.getPageNo(), rows);
		}else {
			pageNation = new PageNation(searchForm.getPageNo(), rows);
		}
		
		searchForm.setBeginIndex(pageNation.getBeginIndex());
		searchForm.setEndIndex(pageNation.getEndIndex());
		
		
		List<Board> boardList = boardService.searchBoard(searchForm);
		
		model.addAttribute("search", searchForm);
		model.addAttribute("pagination", pageNation);
		model.addAttribute("boardList", boardList);
		
		return "/board/board";
	}
	
	
	
}
